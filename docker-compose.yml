services:
  # Frontend Service (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lightrag-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NEXT_PUBLIC_OPENAI_MODEL=gpt-4o-mini
      - NEXT_PUBLIC_EMBEDDING_MODEL=text-embedding-3-small
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - lightrag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Service (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lightrag-backend
    ports:
      - "8000:8000"
    environment:
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=gpt-4o-mini
      - OPENAI_EMBEDDING_MODEL=text-embedding-3-small
      - OPENAI_MAX_TOKENS=4096
      - OPENAI_TEMPERATURE=0.7
      
      # LightRAG Configuration
      - LIGHTRAG_WORKING_DIR=./lightrag_data
      - LIGHTRAG_MODEL=gpt-4o-mini
      - LIGHTRAG_EMBEDDING_MODEL=text-embedding-3-small
      - CHUNK_SIZE=512
      - CHUNK_OVERLAP=50
      
      # Database Configuration
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=lightragpassword123
      - REDIS_URL=redis://:lightragpassword123@redis:6379/0
      - REDIS_URI=redis://:lightragpassword123@redis:6379/0
      
      # Vector Database Configuration
      - CHROMA_PERSIST_DIRECTORY=./chroma_db
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8001
      
      # Application Configuration
      - DEBUG=false
      - LOG_LEVEL=INFO
      - MAX_UPLOAD_SIZE=10485760  # 10MB
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/lightrag_data:/app/lightrag_data
      - ./backend/chroma_db:/app/chroma_db
      - ./backend/logs:/app/logs
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lightrag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.13-community
    container_name: lightrag-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/lightragpassword123
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - lightrag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "lightragpassword123", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis Cache and Session Store
  redis:
    image: redis:7.2-alpine
    container_name: lightrag-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass lightragpassword123
    volumes:
      - redis_data:/data
    networks:
      - lightrag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "lightragpassword123", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ChromaDB Vector Database (Optional - for vector embeddings)
  chroma:
    image: chromadb/chroma:latest
    container_name: lightrag-chroma
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - CHROMA_SERVER_AUTHN_CREDENTIALS_FILE=/chroma/auth.txt
      - CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.basic_authn.BasicAuthenticationProvider
    networks:
      - lightrag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Named volumes for data persistence
volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local

# Custom network for service communication
networks:
  lightrag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 